#!/bin/bash

# This script provides an overview of the AI Workflow TMUX system

cat << EOF

=== 🐳 DOCKER INTEGRATION ===
• Status: Available - Use './setup-workflow.sh --docker' to enable
• Benefits: Isolated execution, consistent Ubuntu environment
• Fallback: Native mode active (commands run on host)

=== AI-WORKFLOW TMUX SYSTEM ===

ENVIRONMENT: 🖥️  Native (Darwin)
WORKSPACE: /Volumes/ryan-home/ryan-homedir/devel/serena

STATUS: ai-workflow session NOT FOUND
RUN: ./setup-workflow.sh to create session

=== 🧠 SERENA INTEGRATION ===
• Memory Hub: Use 'serena' project for persistent context across sessions
• Key Memories: ai-workflow-system-overview, ai-token-optimization-research
• Access Pattern: Serena:activate_project('serena') → Serena:read_memory('memory-name')
• Documentation: Serena:write_memory() to save important discoveries/context
• Shell Access: Serena:execute_shell_command() for tmux operations

=== 📁 FILESYSTEM TOOLS INTEGRATION ===
• File Access: filesystem:read_file('/full/path/to/file') for ANY directory
• Safe Inspection: ALWAYS read before modifying files
• File Creation: filesystem:write_file('/path', 'content') with explicit content
• Directory Ops: filesystem:list_directory(), filesystem:search_files()
• Multi-file: filesystem:read_multiple_files(['path1', 'path2'])
• Safety: Time Machine backups provide recovery safety net
• Coverage: Full access to ~/devel, ~/ted, and any other directories

=== 🤖 AI TOKEN OPTIMIZATION (Research Complete) ===
• Two-Tier Architecture: Claude (strategy) + phi3/Ollama (routine tasks)
• Handoff Pattern: Natural language → phi3 translation → tmux → phi3 cleanup → Claude
• Token Savings: Local AI handles parsing/translation, Claude focuses on reasoning
• Implementation: phi3-simulator.py demonstrates the pattern
• Test Suite: Comprehensive validation in tests/ directory
• Benefits: Speed, cost efficiency, reliability, scalability

=== ⚠️  CRITICAL SAFETY RULES ⚠️  ===
1. NEVER use heredoc syntax (cat << EOF) - ALWAYS use base64 encoding
2. If pane is stuck, DO NOT run recovery commands IN that pane
3. Run recovery commands from OUTSIDE tmux or in a different pane
4. Always add newline after EOF markers to avoid confusion
5. When in doubt, use base64: echo 'content' | base64 | base64 -d > file
6. Use filesystem tools CAREFULLY - inspect before modifying
7. Store important context in Serena memories for persistence

=== OPERATIONAL COMMAND PATTERNS ===
• Native tmux targets: ai-workflow:0.0 (left), ai-workflow:0.1 (top), ai-workflow:0.2 (bottom)
• Native command: tmux send-keys -t ai-workflow:0.[0|1|2] '[command]' Enter
• Native tmux capture: tmux capture-pane -t ai-workflow:0.[0|1|2] -p

=== 🐳 DOCKER TMUX COMMAND PATTERNS ===
• Docker Container Name: ai-workflow-dev
• Docker Tmux Session Name: ai-workflow
• Send command to left pane: 
  docker exec ai-workflow-dev tmux send-keys -t ai-workflow:0.0 'your command' Enter
• Send command to top pane: 
  docker exec ai-workflow-dev tmux send-keys -t ai-workflow:0.1 'your command' Enter
• Send command to bottom pane: 
  docker exec ai-workflow-dev tmux send-keys -t ai-workflow:0.2 'your command' Enter
• Capture Docker pane output: 
  docker exec ai-workflow-dev tmux capture-pane -t ai-workflow:0.[0|1|2] -p

=== TIMEOUT RECOMMENDATIONS ===
• Quick commands (ls, cd): 5-10 seconds
• Build commands: 60-300 seconds
• Test suites: 300-600 seconds
• Interactive programs: No timeout, monitor state instead

=== TROUBLESHOOTING STUCK SESSIONS ===
• Stuck in heredoc (> prompt): Send Ctrl+C, then clear
• Hanging command: Send Ctrl+C to interrupt
• Frozen terminal: Send Ctrl+L to refresh screen
• Wrong directory: Use 'cd' to navigate back
• Garbled output: Type 'reset' and press Enter
• Process won't die: Try Ctrl+C, then Ctrl+Z, then 'kill %1'
• Clear screen: Type 'clear' and press Enter
• Emergency reset: Type 'stty sane' and press Enter

=== 🎯 INTEGRATED WORKFLOW PATTERN ===
1. Activate Serena: Serena:activate_project('serena')
2. Load context: Serena:read_memory('relevant-context')
3. Check tmux: ./tmux-hello (this script)
4. File operations: filesystem:read_file() → inspect → filesystem:write_file()
5. tmux commands: Serena:execute_shell_command() for tmux operations
6. Save context: Serena:write_memory() for important discoveries
7. AI collaboration: Natural language → phi3 translation → structured results

=== READY FOR AI COLLABORATION ===
EOF
