#!/bin/bash

# tmux-hello: AI Assistant Briefing Script
# Explains the ryan-workflow tmux setup in terse, LLM-friendly terms

echo "=== RYAN WORKFLOW TMUX SYSTEM ==="
echo

# Check if session exists
if tmux has-session -t ryan-workflow 2>/dev/null; then
    echo "STATUS: ryan-workflow session ACTIVE"
    
    # Show session layout
    echo
    echo "LAYOUT: 3-pane setup"
    echo "┌─────────────┬─────────────┐"
    echo "│             │     TOP     │"
    echo "│    LEFT     │  (pane 0.1) │"
    echo "│  (pane 0.0) ├─────────────┤"
    echo "│             │   BOTTOM    │"
    echo "│             │  (pane 0.2) │"
    echo "└─────────────┴─────────────┘"
    echo
    
    # Check current state of each pane
    echo "PANE STATUS:"
    for pane in 0 1 2; do
        pane_name=""
        case $pane in
            0) pane_name="LEFT" ;;
            1) pane_name="TOP" ;;
            2) pane_name="BOTTOM" ;;
        esac
        
        # Capture last line to check prompt
        last_line=$(tmux capture-pane -t ryan-workflow:0.$pane -p | tail -1)
        
        if [[ "$last_line" == *"ryan-workflow-bash:$pane_name"* ]]; then
            echo "  $pane_name: ✓ Ready (proper prompt detected)"
        else
            echo "  $pane_name: ? Unknown state - last line: $last_line"
        fi
    done
    
else
    echo "STATUS: ryan-workflow session NOT FOUND"
    echo "RUN: ./setup-workflow.sh to create session"
fi

echo
echo "=== ⚠️  CRITICAL SAFETY RULES ⚠️  ==="
echo "1. NEVER use heredoc syntax (cat << EOF) - ALWAYS use base64 encoding"
echo "2. If pane is stuck, DO NOT run recovery commands IN that pane"
echo "3. Run recovery commands from OUTSIDE tmux or in a different pane"
echo "4. Always add newline after EOF markers to avoid confusion"
echo "5. When in doubt, use base64: echo 'content' | base64 | base64 -d > file"
echo
echo "• Use natural language: 'Run [command] in the [left|top|bottom] pane'"
echo "• tmux targets: ryan-workflow:0.0 (left), ryan-workflow:0.1 (top), ryan-workflow:0.2 (bottom)"
echo "• Expected prompts: 'ryan-workflow-bash:[PANE_NAME] $ '"
echo "• For commands expected to finish: add 'timeout [duration] [command] ; echo ; echo \"program execution done. exit_code=\$?\"'"
echo "• For text injection: use base64 encoding + 'base64 -d | tee filename.txt'"
echo "• NEVER use heredoc syntax - causes shell escaping issues"

echo
echo "=== TIMEOUT RECOMMENDATIONS ==="
echo "• Quick commands (ls, cd): 5-10 seconds"
echo "• Build commands: 60-300 seconds"
echo "• Test suites: 300-600 seconds"
echo "• Interactive programs: No timeout, monitor state instead"

echo
echo "=== KEY TMUX COMMANDS FOR AI ==="
echo "• Send command: tmux send-keys -t ryan-workflow:0.[0|1|2] '[command]' Enter"
echo "• Capture output: tmux capture-pane -t ryan-workflow:0.[0|1|2] -p"
echo "• Check state: tmux capture-pane -t ryan-workflow:0.[0|1|2] -S -10"

echo
echo "=== TROUBLESHOOTING STUCK SESSIONS ==="
echo "• Stuck in heredoc (> prompt): Send Ctrl+C, then clear"
echo "• Hanging command: Send Ctrl+C to interrupt"
echo "• Frozen terminal: Send Ctrl+L to refresh screen"
echo "• Wrong directory: Use 'cd' to navigate back"
echo "• Garbled output: Type 'reset' and press Enter"
echo "• Process won't die: Try Ctrl+C, then Ctrl+Z, then 'kill %1'"
echo "• Clear screen: Type 'clear' and press Enter"
echo "• Emergency reset: Type 'stty sane' and press Enter"
echo
echo "=== RECOVERY COMMANDS FOR AI ==="
echo "⚠️  CRITICAL: Run these from OUTSIDE the stuck pane or OUTSIDE tmux entirely"
echo "• Check pane state: tmux capture-pane -t ryan-workflow:0.[0|1|2] -p | tail -3"
echo "• Send Ctrl+C: tmux send-keys -t ryan-workflow:0.[0|1|2] C-c"
echo "• Send clear: tmux send-keys -t ryan-workflow:0.[0|1|2] 'clear' Enter"
echo "• Reset terminal: tmux send-keys -t ryan-workflow:0.[0|1|2] 'reset' Enter"
echo "• Navigate home: tmux send-keys -t ryan-workflow:0.[0|1|2] 'cd' Enter"
echo "• Use recovery script: ./tmux-recover [pane] [action] (run from outside tmux)"
echo
echo "=== READY FOR AI COLLABORATION ==="
